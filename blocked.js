(function() {
  'use strict';

  // DOM helpers
  function $(id) { return document.getElementById(id); }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
  function applyLocalization() {
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    const blockedTitle = $('blockedTitle');
    if (blockedTitle) {
      blockedTitle.textContent = localeUtils.t('siteBlockedTitle');
    }
    
    // –°–æ–æ–±—â–µ–Ω–∏–µ
    const blockedMessage = $('blockedMessage');
    if (blockedMessage) {
      blockedMessage.textContent = localeUtils.t('siteBlockedMessage');
    }
    
    // –õ–µ–π–±–ª –≤—Ä–µ–º–µ–Ω–∏
    const timeSpentLabel = $('timeSpentLabel');
    if (timeSpentLabel) {
      timeSpentLabel.textContent = localeUtils.t('timeSpent');
    }
    
    // –ö–Ω–æ–ø–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    const unblockButtonText = $('unblockButtonText');
    if (unblockButtonText) {
      unblockButtonText.textContent = localeUtils.t('unblockButton').replace('üîì ', '');
    }
    
    // –§—É—Ç–µ—Ä
    const footer = $('footer');
    if (footer) {
      footer.textContent = localeUtils.t('footer');
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Chrome Extension API
  function checkChromeAPI() {
    if (typeof chrome === 'undefined') {
      return false;
    }
    
    if (!chrome.runtime) {
      return false;
    }
    
    if (!chrome.storage) {
      return false;
    }
    
    return true;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–∞–π—Ç–µ
  function getBlockedSiteInfo() {
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ–º–µ–Ω –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    let domain = getDomainFromMultipleSources();
    
    if (!domain) {
      $('timeSpent').textContent = localeUtils.t('timeSpentNoData');
      $('timeSpent').className = 'time-spent error';
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Chrome API
    if (!checkChromeAPI()) {
      $('timeSpent').textContent = localeUtils.t('timeSpentError');
      $('timeSpent').className = 'time-spent error';
      return;
    }
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ runtime.sendMessage –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
    if (chrome.runtime && chrome.runtime.sendMessage) {
      chrome.runtime.sendMessage({
        action: 'getSiteStats',
        domain: domain
      }, (response) => {
        if (chrome.runtime.lastError) {
          getDataFromStorage(domain);
        } else if (response && response.success) {
          displayTimeStats(domain, response.timeSpent);
        } else {
          getDataFromStorage(domain);
        }
      });
    } else {
      getDataFromStorage(domain);
    }
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ storage
  function getDataFromStorage(domain) {
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ storage
    if (!chrome.storage || !chrome.storage.local) {
      $('timeSpent').textContent = '–û—à–∏–±–∫–∞: Chrome storage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
      $('timeSpent').className = 'time-spent error';
      return;
    }
    
    chrome.storage.local.get({ sites: {}, blocked: [] }, (data) => {
      if (chrome.runtime.lastError) {
        $('timeSpent').textContent = localeUtils.t('timeSpentLoadError');
        $('timeSpent').className = 'time-spent error';
        return;
      }
      
      if (data.sites && data.sites[domain]) {
        const timeSpent = data.sites[domain].time;
        displayTimeStats(domain, timeSpent);
      } else {
        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ –¥–æ–º–µ–Ω—ã
        const similarDomains = Object.keys(data.sites || {}).filter(site => 
          site.includes(domain) || domain.includes(site)
        );
        
        if (similarDomains.length > 0) {
          const timeSpent = data.sites[similarDomains[0]].time;
          displayTimeStats(similarDomains[0], timeSpent);
        } else {
          $('timeSpent').textContent = localeUtils.t('timeSpentNotFound');
          $('timeSpent').className = 'time-spent error';
        }
      }
    });
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
  function displayTimeStats(domain, timeSpent) {
    if (!timeSpent || timeSpent <= 0) {
      $('timeSpent').textContent = localeUtils.t('timeNotTracked');
      $('timeSpent').className = 'time-spent';
      return;
    }
    
    const hours = Math.floor(timeSpent / 3600000);
    const minutes = Math.floor((timeSpent % 3600000) / 60000);
    
    let timeText = '';
    if (hours > 0) {
      timeText = localeUtils.t('hoursMinutes', { hours, minutes });
    } else if (minutes > 0) {
      timeText = localeUtils.t('minutes', { minutes });
    } else {
      timeText = localeUtils.t('lessThanMinute');
    }
    
    const timeElement = $('timeSpent');
    if (timeElement) {
      timeElement.textContent = `${timeText}`;
      timeElement.className = 'time-spent';
    }
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
  function getDomainFromMultipleSources() {
    // 1. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const urlParams = new URLSearchParams(window.location.search);
    const domainFromUrl = urlParams.get('domain');
    if (domainFromUrl) {
      return domainFromUrl;
    }
    
    // 2. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ referrer
    const referrer = document.referrer;
    if (referrer && !referrer.includes('blocked.html')) {
      try {
        const domain = new URL(referrer).hostname;
        if (domain.startsWith('www.')) {
          const cleanDomain = domain.slice(4);
          return cleanDomain;
        }
        return domain;
      } catch (e) {
        // –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ referrer
      }
    }
    
    // 3. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ sessionStorage (–µ—Å–ª–∏ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
    const domainFromSession = sessionStorage.getItem('blockedDomain');
    if (domainFromSession) {
      return domainFromSession;
    }
    
    // 4. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ localStorage
    const domainFromLocal = localStorage.getItem('lastBlockedDomain');
    if (domainFromLocal) {
      return domainFromLocal;
    }
    
    return null;
  }
  
  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
  function confirmUnblock() {
    const domain = getDomainFromMultipleSources();
    
    const message = domain 
      ? localeUtils.t('confirmUnblock', { domain })
      : localeUtils.t('confirmUnblockGeneric');
    
    if (confirm(message)) {
      unblockSite();
    }
  }
  
  // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–∞–π—Ç
  function unblockSite() {
    if (!checkChromeAPI()) {
      alert(localeUtils.t('timeSpentError'));
      return;
    }
    
    const domain = getDomainFromMultipleSources();
    if (!domain) {
      window.history.back();
      return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const btnUnblock = document.getElementById('btnUnblock');
    if (btnUnblock) {
      btnUnblock.disabled = true;
      btnUnblock.innerHTML = `<span>‚è≥</span> ${localeUtils.t('unblocking')}`;
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É —á–µ—Ä–µ–∑ background.js
    chrome.runtime.sendMessage({
      action: 'getOriginalBlockedUrl'
    }, (response) => {
      if (chrome.runtime.lastError) {
        // Fallback: –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ https://domain
        window.location.href = `https://${domain}`;
        return;
      }
      
      const originalUrl = response && response.originalUrl ? response.originalUrl : null;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏ –ø–µ—Ä–µ—Ö–æ–¥
      chrome.runtime.sendMessage({
        action: 'unblockAndOpen',
        domain: domain,
        originalUrl: originalUrl
      }, (unblockResponse) => {
        if (chrome.runtime.lastError) {
          // Fallback: –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ https://domain
          window.location.href = originalUrl || `https://${domain}`;
          return;
        }
        
        if (unblockResponse && unblockResponse.success) {
          // Background.js –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
          if (btnUnblock) {
            btnUnblock.innerHTML = `<span>‚úÖ</span> ${localeUtils.t('unblocked')}`;
            btnUnblock.style.background = '#28a745';
          }
          
          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
          setTimeout(() => {
            window.location.href = originalUrl || `https://${domain}`;
          }, 500);
        } else {
          // Fallback: –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ https://domain
          if (btnUnblock) {
            btnUnblock.disabled = false;
            btnUnblock.innerHTML = `<span>üîì</span> ${localeUtils.t('unblockButton').replace('üîì ', '')}`;
          }
          window.location.href = originalUrl || `https://${domain}`;
        }
      });
    });
  }
  
  // –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
  function goBack() {
    if (document.referrer && !document.referrer.includes('blocked.html')) {
      window.location.href = document.referrer;
    } else {
      window.history.back();
    }
  }

  // Bind events after DOM ready
  document.addEventListener('DOMContentLoaded', () => {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é
    applyLocalization();
    
    // Bind button events
    const btnUnblock = $('btnUnblock');
    const btnBack = $('btnBack');
    
    if (btnUnblock) {
      btnUnblock.addEventListener('click', confirmUnblock);
    }
    
    if (btnBack) {
      btnBack.addEventListener('click', goBack);
    }
    
    // Load site info
    getBlockedSiteInfo();
  });
})(); 