(function() {
  'use strict';

  // DOM helpers
  function $(id) { return document.getElementById(id); }

  // Handlers
  function checkExtensionStatus() {
    const statusDiv = $('extensionStatus');
    statusDiv.textContent = '–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è...';
    statusDiv.className = 'status info';

    if (typeof chrome === 'undefined' || !chrome.runtime) {
      statusDiv.textContent = '‚ùå Chrome extension API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
      statusDiv.className = 'status error';
      return;
    }

    chrome.runtime.sendMessage({ action: 'ping' }, (response) => {
      if (chrome.runtime.lastError) {
        statusDiv.textContent = `‚ùå –û—à–∏–±–∫–∞: ${chrome.runtime.lastError.message}`;
        statusDiv.className = 'status error';
      } else if (response) {
        statusDiv.textContent = `‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n–°—Ç–∞—Ç—É—Å: ${response.status}\n–°–æ–æ–±—â–µ–Ω–∏–µ: ${response.message}\n–¢–µ–∫—É—â–∏–π –¥–æ–º–µ–Ω: ${response.currentDomain || '–ù–µ—Ç'}\n–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: ${response.isTracking ? '–ê–∫—Ç–∏–≤–Ω–æ' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–æ'}\n–í—Ä–µ–º—è: ${new Date(response.timestamp).toLocaleString()}`;
        statusDiv.className = 'status success';
      } else {
        statusDiv.textContent = '‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è';
        statusDiv.className = 'status error';
      }
    });
  }

  function getSitesStats() {
    const statsDiv = $('sitesStats');
    statsDiv.textContent = '–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∞–π—Ç–æ–≤...';
    statsDiv.className = 'status info';

    chrome.storage.local.get({ sites: {} }, (data) => {
      if (chrome.runtime.lastError) {
        statsDiv.textContent = `‚ùå –û—à–∏–±–∫–∞: ${chrome.runtime.lastError.message}`;
        statsDiv.className = 'status error';
      } else {
        const sites = data.sites || {};
        const siteCount = Object.keys(sites).length;

        if (siteCount === 0) {
          statsDiv.textContent = 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞ - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–∞—Ö';
          statsDiv.className = 'status info';
        } else {
          let statsText = `üìä –ù–∞–π–¥–µ–Ω–æ ${siteCount} —Å–∞–π—Ç–æ–≤:\n\n`;
          Object.entries(sites).forEach(([domain, info]) => {
            const timeMs = info.time || 0;
            const hours = Math.floor(timeMs / 3600000);
            const minutes = Math.floor((timeMs % 3600000) / 60000);
            const timeStr = hours > 0 ? `${hours}—á ${minutes}–º` : `${minutes}–º`;
            statsText += `üåê ${domain}: ${timeStr}\n`;
          });
          statsDiv.textContent = statsText;
          statsDiv.className = 'status success';
        }
      }
    });
  }

  function testBlocking() {
    const domain = $('testDomain').value.trim();
    const statusDiv = $('blockingStatus');
    if (!domain) {
      statusDiv.textContent = '‚ùå –í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è';
      statusDiv.className = 'status error';
      return;
    }
    statusDiv.textContent = `–î–æ–±–∞–≤–ª—è–µ–º ${domain} –≤ —Å–ø–∏—Å–æ–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏...`;
    statusDiv.className = 'status info';

    chrome.storage.local.get({ blocked: [] }, (data) => {
      const blocked = data.blocked || [];
      if (blocked.includes(domain)) {
        statusDiv.textContent = `‚ÑπÔ∏è ${domain} —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`;
        statusDiv.className = 'status info';
        return;
      }
      blocked.push(domain);
      chrome.storage.local.set({ blocked }, () => {
        if (chrome.runtime.lastError) {
          statusDiv.textContent = `‚ùå –û—à–∏–±–∫–∞: ${chrome.runtime.lastError.message}`;
          statusDiv.className = 'status error';
        } else {
          statusDiv.textContent = `‚úÖ ${domain} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏!\n\n–¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ http://${domain} –∏–ª–∏ https://${domain}`;
          statusDiv.className = 'status success';
        }
      });
    });
  }

  function testBlockedPage() {
    const domain = $('testDomain').value.trim();
    const statusDiv = $('blockingStatus');
    if (!domain) {
      statusDiv.textContent = '‚ùå –í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è';
      statusDiv.className = 'status error';
      return;
    }
    statusDiv.textContent = `–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è ${domain}...`;
    statusDiv.className = 'status info';

    const blockedUrl = chrome.runtime.getURL(`blocked.html?domain=${encodeURIComponent(domain)}`);
    window.open(blockedUrl, '_blank');

    statusDiv.textContent = `‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è ${domain}\n\nURL: ${blockedUrl}`;
    statusDiv.className = 'status success';
  }

  function getBlockedSites() {
    const blockedDiv = $('blockedSites');
    blockedDiv.textContent = '–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤...';
    blockedDiv.className = 'status info';

    chrome.storage.local.get({ blocked: [] }, (data) => {
      if (chrome.runtime.lastError) {
        blockedDiv.textContent = `‚ùå –û—à–∏–±–∫–∞: ${chrome.runtime.lastError.message}`;
        blockedDiv.className = 'status error';
      } else {
        const blocked = data.blocked || [];
        if (blocked.length === 0) {
          blockedDiv.textContent = 'üîì –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤';
          blockedDiv.className = 'status info';
        } else {
          let blockedText = `üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ ${blocked.length} —Å–∞–π—Ç–æ–≤:\n\n`;
          blocked.forEach(domain => { blockedText += `‚Ä¢ ${domain}\n`; });
          blockedDiv.textContent = blockedText;
          blockedDiv.className = 'status success';
        }
      }
    });
  }

  function clearAllBlocks() {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏?')) return;
    const blockedDiv = $('blockedSites');
    blockedDiv.textContent = '–û—á–∏—â–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏...';
    blockedDiv.className = 'status info';

    chrome.storage.local.set({ blocked: [] }, () => {
      if (chrome.runtime.lastError) {
        blockedDiv.textContent = `‚ùå –û—à–∏–±–∫–∞: ${chrome.runtime.lastError.message}`;
        blockedDiv.className = 'status error';
      } else {
        blockedDiv.textContent = '‚úÖ –í—Å–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—á–∏—â–µ–Ω—ã!';
        blockedDiv.className = 'status success';
      }
    });
  }

  function quickTest() {
    const resultDiv = $('quickTestResult');
    resultDiv.textContent = '–ó–∞–ø—É—Å–∫–∞–µ–º –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç...';
    resultDiv.className = 'status info';

    let testResults = [];
    if (typeof chrome !== 'undefined' && chrome.runtime) testResults.push('‚úÖ Chrome extension API –¥–æ—Å—Ç—É–ø–µ–Ω');
    else testResults.push('‚ùå Chrome extension API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');

    if (typeof chrome !== 'undefined' && chrome.storage) testResults.push('‚úÖ Chrome storage –¥–æ—Å—Ç—É–ø–µ–Ω');
    else testResults.push('‚ùå Chrome storage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');

    if (typeof chrome !== 'undefined' && chrome.runtime && chrome.runtime.sendMessage) testResults.push('‚úÖ Chrome runtime –¥–æ—Å—Ç—É–ø–µ–Ω');
    else testResults.push('‚ùå Chrome runtime –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');

    if (typeof chrome !== 'undefined' && chrome.declarativeNetRequest) testResults.push('‚úÖ Chrome declarativeNetRequest –¥–æ—Å—Ç—É–ø–µ–Ω');
    else testResults.push('‚ùå Chrome declarativeNetRequest –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');

    resultDiv.textContent = `üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞:\n\n${testResults.join('\n')}`;
    resultDiv.className = 'status success';
  }

  function openBlockedPageDirect() {
    const domain = $('testDomain').value.trim();
    const resultDiv = $('extensionContextResult');
    if (!domain) {
      resultDiv.textContent = '‚ùå –í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è';
      resultDiv.className = 'status error';
      return;
    }
    resultDiv.textContent = `–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è ${domain} –Ω–∞–ø—Ä—è–º—É—é...`;
    resultDiv.className = 'status info';

    const blockedUrl = chrome.runtime.getURL(`blocked.html?domain=${encodeURIComponent(domain)}`);
    window.open(blockedUrl, '_blank');

    resultDiv.textContent = `‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è ${domain}\n\nURL: ${blockedUrl}`;
    resultDiv.className = 'status success';
  }

  function testExtensionContext() {
    const resultDiv = $('extensionContextResult');
    resultDiv.textContent = '–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è...';
    resultDiv.className = 'status info';

    let results = [];
    if (typeof chrome !== 'undefined' && chrome.runtime) {
      results.push('‚úÖ chrome.runtime –¥–æ—Å—Ç—É–ø–µ–Ω');
      if (chrome.runtime.id) results.push(`‚úÖ ID —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: ${chrome.runtime.id}`);
      else results.push('‚ùå ID —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');

      if (chrome.runtime.getURL) {
        const testUrl = chrome.runtime.getURL('blocked.html');
        results.push(`‚úÖ getURL —Ä–∞–±–æ—Ç–∞–µ—Ç: ${testUrl}`);
      } else {
        results.push('‚ùå getURL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }
    } else {
      results.push('‚ùå chrome.runtime –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    if (typeof chrome !== 'undefined' && chrome.storage) {
      results.push('‚úÖ chrome.storage –¥–æ—Å—Ç—É–ø–µ–Ω');
      if (chrome.storage.local) results.push('‚úÖ chrome.storage.local –¥–æ—Å—Ç—É–ø–µ–Ω');
      else results.push('‚ùå chrome.storage.local –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    } else {
      results.push('‚ùå chrome.storage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    if (typeof chrome !== 'undefined' && chrome.declarativeNetRequest) results.push('‚úÖ chrome.declarativeNetRequest –¥–æ—Å—Ç—É–ø–µ–Ω');
    else results.push('‚ùå chrome.declarativeNetRequest –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');

    resultDiv.textContent = `üîß –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:\n\n${results.join('\n')}`;
    resultDiv.className = 'status success';
  }

  // Bind events after DOM ready
  document.addEventListener('DOMContentLoaded', () => {
    console.log('Test page loaded');
    const mapping = [
      ['btnCheckExtensionStatus', checkExtensionStatus],
      ['btnGetSitesStats', getSitesStats],
      ['btnTestBlocking', testBlocking],
      ['btnTestBlockedPage', testBlockedPage],
      ['btnGetBlockedSites', getBlockedSites],
      ['btnClearAllBlocks', clearAllBlocks],
      ['btnQuickTest', quickTest],
      ['btnOpenBlockedPageDirect', openBlockedPageDirect],
      ['btnTestExtensionContext', testExtensionContext],
    ];
    mapping.forEach(([id, handler]) => {
      const el = $(id);
      if (el) el.addEventListener('click', handler);
    });

    if (typeof chrome !== 'undefined' && chrome.runtime) {
      console.log('Chrome extension API available');
    } else {
      console.error('Chrome extension API not available');
    }
  });
})(); 